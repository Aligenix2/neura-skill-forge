import { Document, Page, Text, View, StyleSheet, pdf } from '@react-pdf/renderer';
import { saveAs } from 'file-saver';

interface SpeechAnalysisResult {
  content_score: number;
  clarity_score: number;
  delivery_score: number;
  pacing_score: number;
  pacing_evidence: string;
  pacing_advice: string;
  overall_comment: string;
  original_transcription: string;
  positive_aspects: string[];
  areas_to_improve: string[];
  suggested_phrases: Array<{
    original: string;
    suggested: string;
    reason: string;
  }>;
  corrected_speech: string;
}

const styles = StyleSheet.create({
  page: {
    flexDirection: 'column',
    backgroundColor: '#ffffff',
    padding: 30,
    fontFamily: 'Helvetica',
  },
  header: {
    marginBottom: 20,
    borderBottomWidth: 2,
    borderBottomColor: '#2dd4bf',
    paddingBottom: 15,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1e293b',
    marginBottom: 5,
  },
  subtitle: {
    fontSize: 12,
    color: '#64748b',
    marginBottom: 3,
  },
  section: {
    marginBottom: 15,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#2dd4bf',
    marginBottom: 8,
    borderBottomWidth: 1,
    borderBottomColor: '#e2e8f0',
    paddingBottom: 3,
  },
  text: {
    fontSize: 11,
    color: '#374151',
    lineHeight: 1.4,
    marginBottom: 5,
  },
  score: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#1e293b',
    marginBottom: 8,
  },
  categoryRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 5,
    paddingVertical: 3,
  },
  categoryName: {
    fontSize: 11,
    color: '#374151',
    fontWeight: 'bold',
    width: '25%',
  },
  categoryScore: {
    fontSize: 11,
    color: '#2dd4bf',
    fontWeight: 'bold',
    width: '10%',
  },
  categoryExplanation: {
    fontSize: 10,
    color: '#64748b',
    width: '65%',
  },
  bullet: {
    fontSize: 11,
    color: '#374151',
    marginBottom: 3,
    paddingLeft: 10,
  },
  transcriptionBox: {
    backgroundColor: '#f8fafc',
    padding: 10,
    borderWidth: 1,
    borderColor: '#e2e8f0',
    borderRadius: 4,
    marginBottom: 8,
  },
  footer: {
    position: 'absolute',
    bottom: 30,
    left: 30,
    right: 30,
    textAlign: 'center',
    fontSize: 10,
    color: '#94a3b8',
    borderTopWidth: 1,
    borderTopColor: '#e2e8f0',
    paddingTop: 10,
  },
});

const SpeechAnalysisReport = ({ 
  result, 
  topic, 
  userEmail, 
  analysisDate 
}: { 
  result: SpeechAnalysisResult; 
  topic: string; 
  userEmail: string; 
  analysisDate: string; 
}) => (
  <Document>
    <Page size="A4" style={styles.page}>
      {/* Header */}
      <View style={styles.header}>
        <Text style={styles.title}>Speech Analysis Report</Text>
        <Text style={styles.subtitle}>Generated by NEURA Speech Development System</Text>
        <Text style={styles.subtitle}>User: {userEmail}</Text>
        <Text style={styles.subtitle}>Date: {analysisDate}</Text>
      </View>

      {/* Speech Topic */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Speech Topic</Text>
        <Text style={styles.text}>"{topic}"</Text>
      </View>

      {/* Overall Score */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Overall Performance</Text>
        <Text style={styles.score}>Overall Score: {Math.round((result.content_score + result.clarity_score + result.delivery_score + result.pacing_score) / 4)}/10</Text>
        <Text style={styles.text}>Content: {result.content_score}/10</Text>
        <Text style={styles.text}>Clarity: {result.clarity_score}/10</Text>
        <Text style={styles.text}>Delivery: {result.delivery_score}/10</Text>
        <Text style={styles.text}>Pacing: {result.pacing_score}/10</Text>
      </View>

      {/* Pacing Analysis */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Pacing Analysis</Text>
        <Text style={styles.text}>{result.pacing_evidence}</Text>
        <Text style={styles.text}>{result.pacing_advice}</Text>
      </View>

      {/* Original Transcription */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Original Transcription</Text>
        <View style={styles.transcriptionBox}>
          <Text style={styles.text}>"{result.original_transcription}"</Text>
        </View>
      </View>

      {/* Corrected Version */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>AI-Enhanced Version</Text>
        <View style={styles.transcriptionBox}>
          <Text style={styles.text}>"{result.corrected_speech}"</Text>
        </View>
      </View>

      {/* Positive Aspects */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>What You Did Well</Text>
        {result.positive_aspects.map((aspect, index) => (
          <Text key={index} style={styles.bullet}>• {aspect}</Text>
        ))}
      </View>

      {/* Areas to Improve */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Suggestions for Improvement</Text>
        {result.areas_to_improve.map((area, index) => (
          <Text key={index} style={styles.bullet}>• {area}</Text>
        ))}
      </View>

      {/* Suggested Phrases */}
      {result.suggested_phrases && result.suggested_phrases.length > 0 && (
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Alternative Phrase Suggestions</Text>
          {result.suggested_phrases.map((phrase, index) => (
            <View key={index} style={{ marginBottom: 8 }}>
              <Text style={styles.text}>Original: "{phrase.original}"</Text>
              <Text style={styles.text}>Suggested: "{phrase.suggested}"</Text>
              <Text style={styles.text}>Reason: {phrase.reason}</Text>
            </View>
          ))}
        </View>
      )}

      {/* Footer */}
      <Text style={styles.footer}>
        Generated by NEURA Speech Development System • Report v1.0
      </Text>
    </Page>
  </Document>
);

export const generateSpeechAnalysisPDF = async (
  result: SpeechAnalysisResult,
  topic: string,
  userEmail: string = 'user@example.com'
) => {
  const analysisDate = new Date().toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });

  const blob = await pdf(
    <SpeechAnalysisReport 
      result={result} 
      topic={topic} 
      userEmail={userEmail} 
      analysisDate={analysisDate} 
    />
  ).toBlob();
  
  const fileName = `NEURA_Speech_Analysis_${new Date().toISOString().split('T')[0]}.pdf`;
  saveAs(blob, fileName);
};